#!flame/0/--
--CSharpExec
using System.Linq;
using FarseerPhysics;
using FarseerPhysics.Dynamics;
using FarseerPhysics.Dynamics.Joints;
using FarseerPhysics.Factories;
using Microsoft.Xna.Framework;
using FarseerPhysics.Common;
using FarseerPhysics.Collision.Shapes;
using FarseerPhysics.Samples.Demos.Prefabs;

using System.Collections.Generic;


float Density = 1;
--CSharpExec
 Vector2 v(float x, float y)
{
	return new Vector2(x, y);
}
--CSharpExec
World.Clear()

--CSharpExec
(new FarseerPhysics.Samples.Demos.Prefabs.SpiderwebCreator(World)).Test();

--CSharpExec
 World.Clear();
 World.Gravity = Vector2.Zero;
var spider = new FarseerPhysics.Samples.Demos.Prefabs.SpiderwebCreator(World);
spider.Breakpoint = 1000;
var l = 3f;

var l = 3f;
var line1 = new Vertices(from x in Enumerable.Range(0, 5) select v(x * l,0));

Body[] bodyLine1;
DistanceJoint[] distanceJoints;

 spider.CreateDistanceJoint(line1, out bodyLine1, out distanceJoints);
//var bodyLine2 = spider.CreateDistanceJoint(line2);
//var bodyLine3 = spider.CreateDistanceJoint(line3);

//spider.CreateDistanceJoint(bodyLine1, bodyLine2);
//spider.CreateDistanceJoint(bodyLine2, bodyLine3);

var HiddenBody = BodyFactory.CreateBody(World, Vector2.Zero);

JointFactory.CreateRevoluteJoint(World, bodyLine1[0], HiddenBody, Vector2.Zero, Vector2.Zero);

--CSharpExec
from d in distanceJoints select d.Length
--CSharpExec
foreach(var d in distanceJoints)
{
	d.Length = d.Length * 0.5f;
}
--CSharpExec
 World.Clear();
 World.Gravity = Vector2.Zero;
var spider = new FarseerPhysics.Samples.Demos.Prefabs.SpiderwebCreator(World);
spider.Breakpoint = 1000;
var l = 3f;
var line1 = new Vertices(from x in Enumerable.Range(0, 10) select v(x * l,0));

var bodyLine1 = spider.CreateDistanceJoint(line1);

var HiddenBody = BodyFactory.CreateBody(World, Vector2.Zero);

JointFactory.CreateRevoluteJoint(World, bodyLine1[0], HiddenBody, Vector2.Zero, Vector2.Zero);

--CSharpExec
bodyLine1
--CSharpExec
var targetBody =  BodyFactory.CreateCircle(World,0.1f,  Density);
targetBody.Position = new Vector2(-10,-10);
var motor = JointFactory.CreateMotorJoint(World, bodyLine1[0], targetBody); 
//motor.LinearOffset = new Vector2(10,10);
//motor.AngularOffset = 1;
motor.MaxForce= 100;
motor.MaxTorque = 0;

motor.LinearOffset = Vector2.Zero;
--CSharpExec

--CSharpExec

