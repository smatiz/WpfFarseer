#!flame/0/--
--CSharpExec
using System.Linq;
using FarseerPhysics;
using FarseerPhysics.Dynamics;
using FarseerPhysics.Dynamics.Joints;
using FarseerPhysics.Factories;
using Microsoft.Xna.Framework;
using FarseerPhysics.Common;
using FarseerPhysics.Collision.Shapes;
using FarseerPhysics.Samples.Demos.Prefabs;
using FarseerPhysics.Samples.DrawingSystem;

using System.Collections.Generic;
--CSharpExec
World.Clear();
Sprite _goo;
Sprite _link;

float _radius;
float _spriteScale;
World _world;
--CSharpExec
const float breakpoint = 100f;
--CSharpExec
_world = World;
var radius =  ConvertUnits.ToSimUnits(12);
--CSharpExec
int rings= 5;
int sides = 12;
var position = Vector2.Zero;
--CSharpExec
World.Clear();
List<List<Body>> ringBodys = new List<List<Body>>(rings);

for (int i = 1; i < rings; ++i)
{
	Vertices vertices = PolygonTools.CreateCircle(i * 2.9f, sides);
	List<Body> bodies = new List<Body>(sides);

	//Create the first goo
	Body prev = BodyFactory.CreateCircle(World, radius, 0.2f, vertices[0]);
	prev.FixedRotation = true;
	prev.Position += position;
	prev.BodyType = BodyType.Dynamic;

	bodies.Add(prev);

	//Connect the first goo to the next
	for (int j = 1; j < vertices.Count; ++j)
	{
		Body bod = BodyFactory.CreateCircle(World, radius, 0.2f, vertices[j]);
		bod.FixedRotation = true;
		bod.BodyType = BodyType.Dynamic;
		bod.Position += position;

		DistanceJoint dj = JointFactory.CreateDistanceJoint(World, prev, bod, Vector2.Zero, Vector2.Zero);
		dj.Frequency = 4.0f;
		dj.DampingRatio = 0.5f;
		dj.Breakpoint = breakpoint;

		prev = bod;
		bodies.Add(bod);
	}

	//Connect the first and the last goo
	DistanceJoint djEnd = JointFactory.CreateDistanceJoint(World, bodies[0], bodies[bodies.Count - 1], Vector2.Zero, Vector2.Zero);
	djEnd.Frequency = 4.0f;
	djEnd.DampingRatio = 0.5f;
	djEnd.Breakpoint = breakpoint;

	ringBodys.Add(bodies);
}

//Create an outer ring
Vertices lastRing = PolygonTools.CreateCircle(rings * 2.9f, sides);
lastRing.Translate(ref position);

List<Body> lastRingBodies = ringBodys[ringBodys.Count - 1];

//Fix each of the body of the outer ring
for (int j = 0; j < lastRingBodies.Count; ++j)
{
	lastRingBodies[j].IsStatic = true;
}

//Interconnect the rings
for (int i = 1; i < ringBodys.Count; i++)
{
	List<Body> prev = ringBodys[i - 1];
	List<Body> current = ringBodys[i];

	for (int j = 0; j < prev.Count; j++)
	{
		Body prevFixture = prev[j];
		Body currentFixture = current[j];

		DistanceJoint dj = JointFactory.CreateDistanceJoint(World, prevFixture, currentFixture, Vector2.Zero, Vector2.Zero);
		dj.Frequency = 4.0f;
		dj.DampingRatio = 0.5f;
	}
}
--CSharpExec

--CSharpExec

