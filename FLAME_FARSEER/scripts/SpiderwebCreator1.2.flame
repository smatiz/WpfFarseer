#!flame/0/--
--CSharpExec
using System.Linq;
using FarseerPhysics;
using FarseerPhysics.Dynamics;
using FarseerPhysics.Dynamics.Joints;
using FarseerPhysics.Factories;
using Microsoft.Xna.Framework;
using FarseerPhysics.Common;
using FarseerPhysics.Collision.Shapes;
using FarseerPhysics.Samples.Demos.Prefabs;

using System.Collections.Generic;


float Density = 1;
--CSharpExec
 Vector2 v(float x, float y)
{
	return new Vector2(x, y);
}
--CSharpExec
 (new FarseerPhysics.Samples.SM.RopeCreator1(World)).Test2();
--CSharpExec
World.Clear()
--CSharpExec
 World.Clear();
 World.Gravity = v(0,10);
var spider = new FarseerPhysics.Samples.SM.RopeCreator1(World);
spider.Breakpoint = 1000;
var l = 1f;
var o = v(0, -10);
var line1 = new Vertices(from x in Enumerable.Range(0, 5) select o + v(x * l,x * l * 5));

Body[] bodyLine1;
DistanceJoint[] distanceJoints;
spider.CreateDistanceJoint(line1, out bodyLine1, out distanceJoints);




var HiddenBody = BodyFactory.CreateBody(World, Vector2.Zero);
JointFactory.CreateRevoluteJoint(World, bodyLine1[0], HiddenBody, Vector2.Zero, o);

var worm = BodyFactory.CreateCircle(World, 1, Density);
worm.Restitution = 0.5f;
worm.BodyType = BodyType.Dynamic;
worm.Position = bodyLine1[bodyLine1.Length - 1].Position;
JointFactory.CreateRevoluteJoint(World, bodyLine1[bodyLine1.Length - 1], worm, Vector2.Zero, Vector2.Zero);

foreach(var b in bodyLine1)
{
	//b.CollisionGroup = -1;
	b.OnCollision += (x1,x2,x3) => 
	{  
		foreach(var bb in bodyLine1)
		{
			//bb.Enabled = false;
			//bb.
		}	
		return false;
	};
}
var wall = BodyFactory.CreateRectangle(World, 10, 1, Density);
wall.Position = o;

foreach(var d in distanceJoints)
{
	d.Length = d.Length * 0.1f;
}
--CSharpExec
foreach(var d in distanceJoints)
{
	d.Length = d.Length * 0.1f;
}
--CSharpExec
from d in distanceJoints select d.Length
--CSharpExec
foreach(var d in distanceJoints)
{
	d.Length = d.Length * 2f;
}
--CSharpExec

--CSharpExec

