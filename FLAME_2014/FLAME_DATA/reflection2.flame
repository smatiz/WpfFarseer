#!flame/0/--
--CSharpExec
using System;
using System.Linq;
using CcmProcess.Simulation;
using CcmProcess.Control;
using System.Windows.Forms;
--CSharpCompiler
using System.Dynamic;
using System.Reflection;

public static class ClassWrapper
{
	T _tobewrapped;
	
	private static  AddMethodTo(MethodInfo mi)
	{
		(obj as IDictionary<string, object>).Add(mi.Name, "pippo");
	}
	
	private static void AddMethodTo(this ExpandoObject eo, MethodInfo mi)
	{
		(obj as IDictionary<string, object>).Add(mi.Name, "pippo");
	}
	
	public static ExpandoObject Wrapper(T tobewrapped)
	{
		dynamic eo = new ExpandoObject();
		
	}
}
--CSharpExec
var stringa = "ciao";
var t = stringa.GetType();

public static string getFriendlyName(System.Type type)
{
	try
	{
		if (type.IsGenericType)
			return string.Format("{0}<{1}>", type.FullName.Split('`')[0], string.Join(", ", type.GetGenericArguments().Select(x => getFriendlyName(x))));
		else
			return type.FullName.Replace("+", ".");
	}
	catch
	{
		return null;
	}
}


var properties = from x in t.GetProperties()  select new string[] { getFriendlyName(x.PropertyType), x.Name} ;

public static string getprop(string t, string n)
{
	return @"public new _T_ _N_ { 
	get 
	{ 
		threadController.Control(""_T_"", ""_N_""); 
		return base._N_; 
	} 
	set 
	{ 
		threadController.Control(""_T_"", ""_N_""); 
		base._N_ = value; 
	} 
	}".Replace("_T_", t).Replace("_N_", n);
}

var props = (from z in y where z != null select getprop(z[0], z[1])).ToList().Aggregate((i, j) => i + "\n" + j);


var methods = from x in t.GetMethods()  select new string[] { getFriendlyName(x.MethodType), x.Name} ;

public static string getmethod(string t, string n, string tp, string p)
{
	return @"public new _T_ _N_(_TP_) { 

		threadController.Control(""_T_"", ""_N_""); 
		return base._N_(_P_); 
	}".Replace("_T_", t).Replace("_N_", n).Replace("_TP_", tp).Replace("_N_", p);
}

var meths = (from z in y where z != null select getprop(z[0], z[1])).ToList().Aggregate((i, j) => i + "\n" + j);




var mainScript = (
@"
public class _N_Wrapper
{
	ThreadController _threadController;
	
	public _N_Wrapper(ThreadController _threadController) { _threadController = threadController; }
	
	_P_
	
}
").Replace("_T_", "System.String").Replace("_N_", "String").Replace("_P_", props);


--CSharpExec
mainScript
--CSharpExec
t.GetMethods()
--CSharpExec

--CSharpExec

