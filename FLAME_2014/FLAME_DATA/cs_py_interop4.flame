#!flame/0/--
--CSharpExec
var share = ((Flame.Controls.ScripterControlFormInfo)Get("flame")).ScripterTabbedControl.ScripterLoaderControl.ScripterControl.Manager.Share;

--IronPythonExec
share = flame.ScripterTabbedControl.ScripterLoaderControl.ScripterControl.Manager.Share

--CSharpExec







--CSharpExec
// scambio di lambda

share.set("csharpLamda", new System.Func<int, int>((int i) => { return i + 5;}));

--IronPythonExec
share.get("csharpLamda")(4)

--IronPythonExec
# scambio di lambda

share.set("pythonLamda", System.Func[int,int](lambda x : x + 3) )

--CSharpExec
((System.Func<int, int>)share.get("pythonLamda"))(42);

--CSharpExec






--CSharpCompiler
// scambio di oggetti

public interface ICharp
{
	int sumwith(int x);
}

--IronPythonExec
import ICharp
class ICharp_PythonImplemetation(ICharp):
 def sumwith(self, x):
  return x + 123

share.set("ICharp_PythonImplemetationCostructor", System.Func[ICharp](lambda  : ICharp_PythonImplemetation() ))

--CSharpExec
((System.Func<ICharp>)share.get("ICharp_PythonImplemetationCostructor"))().sumwith(5)

--CSharpExec
// scambio di oggetti

public class CharpClass
{
	public int sumwith12(int x) { return x + 12; }
}
share.set("CharpClassCostructor", new System.Func<CharpClass>( () => { return new CharpClass(); }));

--IronPythonExec
share.get("CharpClassCostructor")().sumwith12(5)

--CSharpExec







--IronPythonExec
# linq

share.set("listPython", System.Collections.Generic.List[int]( [i % 2 for i in range(1,10)  if i != 3 ]))

--CSharpExec
using System.Linq;
var listPython = (System.Collections.Generic.List<int>)share.get("listPython");
from i in listPython  where i != 0 select i + 10

--IronPythonExec


--CSharpExec


--IronPythonExec
import System
System.Windows.Forms.MessageBox.Show("ckjk")

--IronPythonExec


--IronPythonExec

